!function(e){var t={};function n(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(s,r,function(t){return e[t]}.bind(null,r));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e){e.exports=JSON.parse('[{"title":"Research Dissemination","description":"Conducting novel research requires deep understanding and expertise in a specific area. Once achieved, researchers continue contributing new knowledge for future people to use and build upon. Over time, this consistent addition of new knowledge can build up, contributing to what some have called research debt [olah2017research]. Not everyone is an expert in every field, and it can be easy to lose perspective and forget the bigger picture [matt might]. Yet research should be understood by many. Interactive articles can be used to distill the latest progress in various research fields and make their methods and results accessible and understandable to a broader audience.","opportunities":["Engage and excite broader audience with latest research progress","Remove research debt, onboard new researchers","Make faster and clearer research progress"],"challenges":["No clear incentive structure for researchers","Little funding for bespoke research dissemination and communication","Not seen as a legitimate research contribution (e.g., to field, or one’s career)"],"examples":[{"title":"Attacking Discrimination with Smarter Machine Learning","description":"This companion piece to a traditional research paper uses interactive graphics to let readers adjust a machine learning model’s behavior and visualize results for a loan granting scenario.","url":"https://research.google.com/bigpicture/attacking-discrimination-in-ml/","image":"research-ex1.png"},{"title":"Coeffects: Context-aware Programming Languages","description":"This PhD thesis contributes a programming language abstraction for understanding how programs access the context or environment in which they execute, and walks readers through the work using two simple context-aware languages with live in-browser demos.","url":"http://tomasp.net/coeffects/","image":"research-ex2.png"},{"title":"What is Complexity Science?","description":"A crash course in complex systems science, created by leading experts, practitioners, and students in the field, with accompanying interactive sandboxes to simulate, control, and visualize different complex systems.","url":"https://complexityexplained.github.io/","image":"research-ex3.png"}]},{"title":"Journalism","description":"An informed public strengthens society. While many newsworthy and current events are reported daily, unfortunately the complexity and nuance of such topics are lost in the wildfire sharing of short headlines. This is effective dissemination without context. Yet many of the most impactful stories require a deep understanding of the various locations, personale, and perspectives involved. Interactive articles can be used to breakdown these complex topics into more approachable pieces, show their connections in relation to the main message, highlight the impact of investigate reports, and inform a wide readership of current events and impactful stories.","opportunities":["Tell stories from multiple dynamic perspectives and levels of detail","Highlight importance of a story or report","TK"],"challenges":["Require active reading in a reader that may be expecting bite-sized news","Many readers viewing on mobile devices requires responsive design","TK"],"examples":[{"title":"What’s Really Warming the World?","description":"A segmented-story that layers different natural and industrial factors recorded since 1880 on the same axis to compare and contrast which factors are correlated with the increase of the global temperature rise.","url":"https://www.bloomberg.com/graphics/2015-whats-warming-the-world/","image":"placeholder.png"},{"title":"You Draw It: How Family Income Predicts Children’s College Chances","description":"An article with an empty visualization that prompts the reader to draw the line that describes the relationship between family income and the percentage of children who attend college, challenging one’s prior belief about the data.","url":"https://www.nytimes.com/interactive/2015/05/28/upshot/you-draw-it-how-family-income-affects-childrens-college-chances.html","image":"placeholder.png"},{"title":"Example 3","description":"EX 3 [uber game or gun deaths]","url":"","image":"placeholder.png"}]},{"title":"Education","description":"Lorem ipsum dolor, sit amet consectetur adipisicing elit. Totam nihil doloremque facilis ab illo velit consequatur? Blanditiis, alias? Laborum quisquam ex sequi officia? Pariatur exercitationem quidem hic aliquam et sunt.","opportunities":["Reinforce learning by presenting content in multiple forms","More quickly grapple complex topics that require visual or geometric interpretations","TK"],"challenges":["TK","TK","TK"],"examples":[{"title":"Let’s Learn About Waveforms","description":"An interactive guide that introduces and explores waveforms without requiring prior knowledge. The article lets readers play with different waveforms using sound to understand their basic physics and relationship to music and harmony.","url":"https://pudding.cool/2018/02/waveforms/","image":"placeholder.png"},{"title":"The Book of Shaders","description":"A step-by-step guide that walks a reader through the notoriously challenging topic of computer graphics fragment shaders using interactive code examples.","url":"https://thebookofshaders.com/","image":"placeholder.png"},{"title":"EconGraphs","description":"While most interactive textbooks are about mathematics, this collection of key concepts from economics using interactive visualization to help econ teachers illustrate important underlying relationships within economic models.","url":"http://www.econgraphs.org/","image":"placeholder.png"}]},{"title":"Policy Making","description":"Lorem ipsum dolor, sit amet consectetur adipisicing elit. Totam nihil doloremque facilis ab illo velit consequatur? Blanditiis, alias? Laborum quisquam ex sequi officia? Pariatur exercitationem quidem hic aliquam et sunt.","opportunities":["Concretize complex societal issues using experimental sandboxes","Inform public of past, present, and future policies and their impact","TK"],"challenges":["Often asks for greater numeracy and graphicacy in citizens","TK","TK"],"examples":[{"title":"To Build a Better Ballot","description":"An explorable explanation that uses direct manipulation to show election outcomes under different voting methods to provide concrete tools for voting reform.","url":"https://ncase.me/ballot/","image":"placeholder.png"},{"title":"The Atlas Of Redistricting","description":"Visualizations of the United States and its breakdown on governmental representation and gerrymandering. Interactive toggles that redraw district boundaries compare the makeup of the US House of Representatives under different goals, both partisan and bipartisan, all without a single voter moving.","url":"https://projects.fivethirtyeight.com/redistricting-maps/","image":"placeholder.png"},{"title":"Is It Better to Rent or Buy?","description":"Built into this article is an interactive calculator that suggests if a reader should buy or rent a property based on a collection of user-selected costs.","url":"https://www.nytimes.com/interactive/2014/upshot/buy-rent-calculator.html","image":"placeholder.png"}]}]')},function(e,t,n){"use strict";n.r(t);function s(){}function r(e){return e()}function i(){return Object.create(null)}function l(e){e.forEach(r)}function o(e){return"function"==typeof e}function a(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}function c(e,t){const n=e.subscribe(t);return n.unsubscribe?()=>n.unsubscribe():n}function d(e,t,n){e.$$.on_destroy.push(c(t,n))}function u(e,t,n,s){if(e){const r=h(e,t,n,s);return e[0](r)}}function h(e,t,n,s){return e[1]&&s?function(e,t){for(const n in t)e[n]=t[n];return e}(n.ctx.slice(),e[1](s(t))):n.ctx}function p(e,t,n,s){if(e[2]&&s){const r=e[2](s(n));if("object"==typeof t.dirty){const e=[],n=Math.max(t.dirty.length,r.length);for(let s=0;s<n;s+=1)e[s]=t.dirty[s]|r[s];return e}return t.dirty|r}return t.dirty}function f(e){return null==e?"":e}new Set;function g(e,t){e.appendChild(t)}function m(e,t,n){e.insertBefore(t,n||null)}function v(e){e.parentNode.removeChild(e)}function y(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)}function b(e){return document.createElement(e)}function x(e){return document.createTextNode(e)}function $(){return x(" ")}function w(){return x("")}function z(e,t,n,s){return e.addEventListener(t,n,s),()=>e.removeEventListener(t,n,s)}function j(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function k(e,t){t=""+t,e.data!==t&&(e.data=t)}function T(e,t){(null!=t||e.value)&&(e.value=t)}function C(e,t,n,s){e.style.setProperty(t,n,s?"important":"")}function E(e,t,n){e.classList[n?"add":"remove"](t)}let I;function _(e){I=e}function q(){if(!I)throw new Error("Function called outside component initialization");return I}function B(e){q().$$.on_destroy.push(e)}function O(e){return q().$$.context.get(e)}const A=[],P=[],L=[],M=[],S=Promise.resolve();let D=!1;function R(){D||(D=!0,S.then(H))}function N(e){L.push(e)}function H(){const e=new Set;do{for(;A.length;){const e=A.shift();_(e),K(e.$$)}for(;P.length;)P.pop()();for(let t=0;t<L.length;t+=1){const n=L[t];e.has(n)||(n(),e.add(n))}L.length=0}while(A.length);for(;M.length;)M.pop()();D=!1}function K(e){if(null!==e.fragment){e.update(),l(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(N)}}const W=new Set;let Y;function F(){Y={r:0,c:[],p:Y}}function J(){Y.r||l(Y.c),Y=Y.p}function U(e,t){e&&e.i&&(W.delete(e),e.i(t))}function G(e,t,n,s){if(e&&e.o){if(W.has(e))return;W.add(e),Y.c.push(()=>{W.delete(e),s&&(n&&e.d(1),s())}),e.o(t)}}"undefined"!=typeof window?window:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let V;function X(e){e&&e.c()}function Q(e,t,n){const{fragment:s,on_mount:i,on_destroy:a,after_update:c}=e.$$;s&&s.m(t,n),N(()=>{const t=i.map(r).filter(o);a?a.push(...t):l(t),e.$$.on_mount=[]}),c.forEach(N)}function Z(e,t){const n=e.$$;null!==n.fragment&&(l(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function ee(e,t,n,r,o,a,c=[-1]){const d=I;_(e);const u=t.props||{},h=e.$$={fragment:null,ctx:null,props:a,update:s,not_equal:o,bound:i(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(d?d.$$.context:[]),callbacks:i(),dirty:c};let p=!1;var f;h.ctx=n?n(e,u,(t,n,...s)=>{const r=s.length?s[0]:n;return h.ctx&&o(h.ctx[t],h.ctx[t]=r)&&(h.bound[t]&&h.bound[t](r),p&&function(e,t){-1===e.$$.dirty[0]&&(A.push(e),R(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(e,t)),n}):[],h.update(),p=!0,l(h.before_update),h.fragment=!!r&&r(h.ctx),t.target&&(t.hydrate?h.fragment&&h.fragment.l((f=t.target,Array.from(f.childNodes))):h.fragment&&h.fragment.c(),t.intro&&U(e.$$.fragment),Q(e,t.target,t.anchor),H()),_(d)}"function"==typeof HTMLElement&&(V=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){for(const e in this.$$.slotted)this.appendChild(this.$$.slotted[e])}attributeChangedCallback(e,t,n){this[e]=n}$destroy(){Z(this,1),this.$destroy=s}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(){}});class te{$destroy(){Z(this,1),this.$destroy=s}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(){}}function ne(e){let t;return{c(){t=b("table"),t.innerHTML='<thead><tr><th class="svelte-652fg4"></th> \n      <th scope="col" class="svelte-652fg4">Research</th> \n      <th scope="col" class="svelte-652fg4">Practice</th></tr></thead> \n  <tbody><tr><th scope="row" class="svelte-652fg4">Authoring</th> \n      <td class="svelte-652fg4">Next generation tooling</td> \n      <td class="svelte-652fg4">Evaluate in production setting, identify bugs</td></tr> \n    <tr><th scope="row" class="svelte-652fg4">Designing</th> \n      <td class="svelte-652fg4">Developing theory, conducting laboratory studies</td> \n      <td class="svelte-652fg4">Evaluate specific design decisions in the wild, understand constraints</td></tr> \n    <tr><th scope="row" class="svelte-652fg4">Publishing</th> \n      <td class="svelte-652fg4">Tools, guidelines, and best practices</td> \n      <td class="svelte-652fg4">Concrete examples for others to follow, available source code, accessible archives, DOI, branding</td></tr></tbody>',j(t,"id","research-x-practice-table"),j(t,"class","svelte-652fg4")},m(e,n){m(e,t,n)},p:s,i:s,o:s,d(e){e&&v(t)}}}var se=class extends te{constructor(e){var t;super(),document.getElementById("svelte-652fg4-style")||((t=b("style")).id="svelte-652fg4-style",t.textContent="#research-x-practice-table.svelte-652fg4.svelte-652fg4{overflow-x:scroll;width:100%}#research-x-practice-table.svelte-652fg4 th.svelte-652fg4{white-space:nowrap}#research-x-practice-table.svelte-652fg4 tbody th.svelte-652fg4{font-weight:initial;border-bottom:1px solid rgb(242, 242, 242)}#research-x-practice-table.svelte-652fg4 tbody tr:last-of-type th.svelte-652fg4{border-bottom:inherit}#research-x-practice-table.svelte-652fg4 td.svelte-652fg4{border-color:rgb(242, 242, 242)}",g(document.head,t)),ee(this,e,null,ne,a,{})}};function re(e){let t;return{c(){t=b("nav"),t.innerHTML='<h3>Contents</h3> \n\n  <div class="svelte-hetnyh"><a href="#introduction" class="svelte-hetnyh">Introduction</a></div> \n\n  <details class="svelte-hetnyh"><summary class="svelte-hetnyh">The Capabilities of Interactive Articles</summary> \n    <a href="#interactive-articles" class="svelte-hetnyh"><em>navigate to &quot;The Capabilities of Interactive Articles&quot;</em></a> \n    <ul class="svelte-hetnyh"><li class="svelte-hetnyh"><a href="#improving-recall" class="svelte-hetnyh">Improving Recall</a></li> \n      <li class="svelte-hetnyh"><a href="#improving-engagement" class="svelte-hetnyh">Improving Engagement</a></li> \n      <li class="svelte-hetnyh"><a href="#enabling-experience" class="svelte-hetnyh">Enabling Experience</a></li> \n      <li class="svelte-hetnyh"><a href="#reducing-cognitive-load" class="svelte-hetnyh">Reducing Cognitive Load</a></li> \n      <li class="svelte-hetnyh"><a href="#personalization" class="svelte-hetnyh">Personalization</a></li></ul></details> \n\n  <div class="svelte-hetnyh"><a href="#applications" class="svelte-hetnyh">Applications</a></div> \n\n  <div class="svelte-hetnyh"><a href="#critical-reflections" class="svelte-hetnyh">Critical Reflections</a></div> \n\n  <div class="svelte-hetnyh"><a href="#challenges" class="svelte-hetnyh">Challenges of Interactive Writing</a></div> \n\n  <div class="svelte-hetnyh"><a href="#discussion" class="svelte-hetnyh">Discussion</a></div>',j(t,"class","l-text toc figcaption svelte-hetnyh")},m(e,n){m(e,t,n)},p:s,i:s,o:s,d(e){e&&v(t)}}}var ie=class extends te{constructor(e){var t;super(),document.getElementById("svelte-hetnyh-style")||((t=b("style")).id="svelte-hetnyh-style",t.textContent="nav.svelte-hetnyh.svelte-hetnyh a.svelte-hetnyh.svelte-hetnyh{color:rgba(0, 0, 0, 0.8);border-bottom:none;text-decoration:none}nav.svelte-hetnyh.svelte-hetnyh ul li.svelte-hetnyh.svelte-hetnyh{margin-bottom:0.25em}nav.svelte-hetnyh.svelte-hetnyh a.svelte-hetnyh.svelte-hetnyh:hover{text-decoration:underline solid rgba(0, 0, 0, 0.6)}nav.svelte-hetnyh.svelte-hetnyh details ul.svelte-hetnyh.svelte-hetnyh{margin-top:0}nav.svelte-hetnyh details.svelte-hetnyh>a.svelte-hetnyh{margin-left:1.06em}nav.svelte-hetnyh.svelte-hetnyh summary.svelte-hetnyh.svelte-hetnyh,nav.svelte-hetnyh.svelte-hetnyh>div.svelte-hetnyh.svelte-hetnyh,nav.svelte-hetnyh details.svelte-hetnyh>a.svelte-hetnyh{display:block;outline:none;margin-bottom:0.5em}nav.svelte-hetnyh.svelte-hetnyh>div.svelte-hetnyh.svelte-hetnyh{margin-left:1.06em}nav.svelte-hetnyh.svelte-hetnyh summary.svelte-hetnyh.svelte-hetnyh{cursor:context-menu}nav.svelte-hetnyh.svelte-hetnyh summary.svelte-hetnyh.svelte-hetnyh,nav.svelte-hetnyh>div.svelte-hetnyh>a.svelte-hetnyh{font-size:13px;font-weight:600}",g(document.head,t)),ee(this,e,null,re,a,{})}};const le=[];function oe(e,t=s){let n;const r=[];function i(t){if(a(e,t)&&(e=t,n)){const t=!le.length;for(let t=0;t<r.length;t+=1){const n=r[t];n[1](),le.push(n,e)}if(t){for(let e=0;e<le.length;e+=2)le[e][0](le[e+1]);le.length=0}}}return{set:i,update:function(t){i(t(e))},subscribe:function(l,o=s){const a=[l,o];return r.push(a),1===r.length&&(n=t(i)||s),l(e),()=>{const e=r.indexOf(a);-1!==e&&r.splice(e,1),0===r.length&&(n(),n=null)}}}}function ae(e){let t,n;const s=e[5].default,r=u(s,e,e[4],null);return{c(){t=b("div"),r&&r.c(),j(t,"class","tabs svelte-5jhylz")},m(e,s){m(e,t,s),r&&r.m(t,null),n=!0},p(e,[t]){r&&r.p&&16&t&&r.p(h(s,e,e[4],null),p(s,e[4],t,null))},i(e){n||(U(r,e),n=!0)},o(e){G(r,e),n=!1},d(e){e&&v(t),r&&r.d(e)}}}const ce={};function de(e,t,n){const s=[],r=[],i=oe(null),l=oe(null);var o,a;o=ce,a={registerTab:e=>{s.push(e),i.update(t=>t||e),B(()=>{const t=s.indexOf(e);s.splice(t,1),i.update(n=>n===e?s[t]||s[s.length-1]:n)})},registerPanel:e=>{r.push(e),l.update(t=>t||e),B(()=>{const t=r.indexOf(e);r.splice(t,1),l.update(n=>n===e?r[t]||r[r.length-1]:n)})},selectTab:e=>{const t=s.indexOf(e);i.set(e),l.set(r[t])},selectedTab:i,selectedPanel:l},q().$$.context.set(o,a);let{$$slots:c={},$$scope:d}=t;return e.$set=e=>{"$$scope"in e&&n(4,d=e.$$scope)},[s,r,i,l,d,c]}var ue=class extends te{constructor(e){var t;super(),document.getElementById("svelte-5jhylz-style")||((t=b("style")).id="svelte-5jhylz-style",t.textContent=".tabs.svelte-5jhylz{background-color:var(--gray-bg);border:solid 1px var(--gray-border);border-radius:var(--border-radius)}",g(document.head,t)),ee(this,e,de,ae,a,{})}};function he(e){let t,n;const s=e[1].default,r=u(s,e,e[0],null);return{c(){t=b("div"),r&&r.c(),j(t,"class","tab-list svelte-1s3nj47")},m(e,s){m(e,t,s),r&&r.m(t,null),n=!0},p(e,[t]){r&&r.p&&1&t&&r.p(h(s,e,e[0],null),p(s,e[0],t,null))},i(e){n||(U(r,e),n=!0)},o(e){G(r,e),n=!1},d(e){e&&v(t),r&&r.d(e)}}}function pe(e,t,n){let{$$slots:s={},$$scope:r}=t;return e.$set=e=>{"$$scope"in e&&n(0,r=e.$$scope)},[r,s]}var fe=class extends te{constructor(e){var t;super(),document.getElementById("svelte-1s3nj47-style")||((t=b("style")).id="svelte-1s3nj47-style",t.textContent=".tab-list.svelte-1s3nj47{border-bottom:1px solid var(--gray-border);display:flex;flex-wrap:wrap}",g(document.head,t)),ee(this,e,pe,he,a,{})}};function ge(e){let t;const n=e[5].default,s=u(n,e,e[4],null);return{c(){s&&s.c()},m(e,n){s&&s.m(e,n),t=!0},p(e,t){s&&s.p&&16&t&&s.p(h(n,e,e[4],null),p(n,e[4],t,null))},i(e){t||(U(s,e),t=!0)},o(e){G(s,e),t=!1},d(e){s&&s.d(e)}}}function me(e){let t,n,s=e[0]===e[1]&&ge(e);return{c(){s&&s.c(),t=w()},m(e,r){s&&s.m(e,r),m(e,t,r),n=!0},p(e,[n]){e[0]===e[1]?s?(s.p(e,n),U(s,1)):(s=ge(e),s.c(),U(s,1),s.m(t.parentNode,t)):s&&(F(),G(s,1,1,()=>{s=null}),J())},i(e){n||(U(s),n=!0)},o(e){G(s),n=!1},d(e){s&&s.d(e),e&&v(t)}}}function ve(e,t,n){let s;const r={},{registerPanel:i,selectedPanel:l}=O(ce);d(e,l,e=>n(0,s=e)),i(r);let{$$slots:o={},$$scope:a}=t;return e.$set=e=>{"$$scope"in e&&n(4,a=e.$$scope)},[s,r,l,i,a,o]}var ye=class extends te{constructor(e){super(),ee(this,e,ve,me,a,{})}};function be(e){let t,n,s;const r=e[6].default,i=u(r,e,e[5],null);return{c(){t=b("button"),i&&i.c(),j(t,"class","svelte-m4f1z5"),E(t,"selected",e[0]===e[1])},m(r,l){m(r,t,l),i&&i.m(t,null),n=!0,s=z(t,"click",e[7])},p(e,[n]){i&&i.p&&32&n&&i.p(h(r,e,e[5],null),p(r,e[5],n,null)),3&n&&E(t,"selected",e[0]===e[1])},i(e){n||(U(i,e),n=!0)},o(e){G(i,e),n=!1},d(e){e&&v(t),i&&i.d(e),s()}}}function xe(e,t,n){let s;const r={},{registerTab:i,selectTab:l,selectedTab:o}=O(ce);d(e,o,e=>n(0,s=e)),i(r);let{$$slots:a={},$$scope:c}=t;return e.$set=e=>{"$$scope"in e&&n(5,c=e.$$scope)},[s,r,l,o,i,c,a,()=>l(r)]}var $e=class extends te{constructor(e){var t;super(),document.getElementById("svelte-m4f1z5-style")||((t=b("style")).id="svelte-m4f1z5-style",t.textContent="button.svelte-m4f1z5{background:none;border:none;border-radius:0;margin:0;color:#bbb;font-size:1em;padding:1em;cursor:pointer;flex:1;border-bottom:3px solid var(--gray-bg)}button.svelte-m4f1z5:focus{outline:0}.selected.svelte-m4f1z5{border-bottom:3px solid var(--orange);color:#333}",g(document.head,t)),ee(this,e,xe,be,a,{})}};function we(e,t,n){const s=e.slice();return s[1]=t[n],s}function ze(e,t,n){const s=e.slice();return s[4]=t[n],s}function je(e,t,n){const s=e.slice();return s[7]=t[n],s}function ke(e){let t,n,s,r=e[7]+"";return{c(){t=b("li"),n=x(r),s=$(),j(t,"class","svelte-ez734h")},m(e,r){m(e,t,r),g(t,n),g(t,s)},p(e,t){1&t&&r!==(r=e[7]+"")&&k(n,r)},d(e){e&&v(t)}}}function Te(e){let t,n,s,r=e[4]+"";return{c(){t=b("li"),n=x(r),s=$(),j(t,"class","svelte-ez734h")},m(e,r){m(e,t,r),g(t,n),g(t,s)},p(e,t){1&t&&r!==(r=e[4]+"")&&k(n,r)},d(e){e&&v(t)}}}function Ce(e){let t,n,s,r,i,l,o,a,c,d,u,h,p,f,y=e[1].title+"",w=e[1].description+"";return{c(){t=b("div"),n=b("a"),s=b("img"),l=$(),o=b("div"),a=b("a"),c=x(y),u=$(),h=b("div"),p=x(w),f=$(),s.src!==(r="images/application-tabs/"+e[1].image)&&j(s,"src",r),j(s,"class","svelte-ez734h"),j(n,"href",i=e[1].url),j(n,"class","svelte-ez734h"),j(a,"href",d=e[1].url),j(o,"class","example-title svelte-ez734h"),j(h,"class","example-description svelte-ez734h"),j(t,"class","example svelte-ez734h")},m(e,r){m(e,t,r),g(t,n),g(n,s),g(t,l),g(t,o),g(o,a),g(a,c),g(t,u),g(t,h),g(h,p),g(t,f)},p(e,t){1&t&&s.src!==(r="images/application-tabs/"+e[1].image)&&j(s,"src",r),1&t&&i!==(i=e[1].url)&&j(n,"href",i),1&t&&y!==(y=e[1].title+"")&&k(c,y),1&t&&d!==(d=e[1].url)&&j(a,"href",d),1&t&&w!==(w=e[1].description+"")&&k(p,w)},d(e){e&&v(t)}}}function Ee(e){let t,n,r,i,l,o,a,c,d,u,h,p,f,w,z,T,C,E,I,_,q,B,O,A,P=e[0].title+"",L=e[0].description+"",M=e[0].opportunities,S=[];for(let t=0;t<M.length;t+=1)S[t]=ke(je(e,M,t));let D=e[0].challenges,R=[];for(let t=0;t<D.length;t+=1)R[t]=Te(ze(e,D,t));let N=e[0].examples,H=[];for(let t=0;t<N.length;t+=1)H[t]=Ce(we(e,N,t));return{c(){t=b("div"),n=b("div"),r=b("h3"),i=x(P),l=$(),o=b("div"),a=x(L),c=$(),d=b("div"),u=b("div"),h=b("h4"),h.textContent="Opportunities",p=$(),f=b("ul");for(let e=0;e<S.length;e+=1)S[e].c();w=$(),z=b("br"),T=$(),C=b("div"),E=b("h4"),E.textContent="Challenges",I=$(),_=b("ul");for(let e=0;e<R.length;e+=1)R[e].c();q=$(),B=b("br"),O=$(),A=b("div");for(let e=0;e<H.length;e+=1)H[e].c();j(r,"class","application-title svelte-ez734h"),j(o,"class","application-description"),j(n,"class","left svelte-ez734h"),j(h,"class","opportunities-title svelte-ez734h"),j(f,"class","svelte-ez734h"),j(u,"class","application-opportunities svelte-ez734h"),j(E,"class","challenges-title svelte-ez734h"),j(_,"class","svelte-ez734h"),j(C,"class","application-challenges svelte-ez734h"),j(d,"class","right svelte-ez734h"),j(A,"class","bottom svelte-ez734h"),j(t,"class","application svelte-ez734h")},m(e,s){m(e,t,s),g(t,n),g(n,r),g(r,i),g(n,l),g(n,o),g(o,a),g(t,c),g(t,d),g(d,u),g(u,h),g(u,p),g(u,f);for(let e=0;e<S.length;e+=1)S[e].m(f,null);g(d,w),g(d,z),g(d,T),g(d,C),g(C,E),g(C,I),g(C,_);for(let e=0;e<R.length;e+=1)R[e].m(_,null);g(t,q),g(t,B),g(t,O),g(t,A);for(let e=0;e<H.length;e+=1)H[e].m(A,null)},p(e,[t]){if(1&t&&P!==(P=e[0].title+"")&&k(i,P),1&t&&L!==(L=e[0].description+"")&&k(a,L),1&t){let n;for(M=e[0].opportunities,n=0;n<M.length;n+=1){const s=je(e,M,n);S[n]?S[n].p(s,t):(S[n]=ke(s),S[n].c(),S[n].m(f,null))}for(;n<S.length;n+=1)S[n].d(1);S.length=M.length}if(1&t){let n;for(D=e[0].challenges,n=0;n<D.length;n+=1){const s=ze(e,D,n);R[n]?R[n].p(s,t):(R[n]=Te(s),R[n].c(),R[n].m(_,null))}for(;n<R.length;n+=1)R[n].d(1);R.length=D.length}if(1&t){let n;for(N=e[0].examples,n=0;n<N.length;n+=1){const s=we(e,N,n);H[n]?H[n].p(s,t):(H[n]=Ce(s),H[n].c(),H[n].m(A,null))}for(;n<H.length;n+=1)H[n].d(1);H.length=N.length}},i:s,o:s,d(e){e&&v(t),y(S,e),y(R,e),y(H,e)}}}function Ie(e,t,n){let{applicationData:s}=t;return e.$set=e=>{"applicationData"in e&&n(0,s=e.applicationData)},[s]}var _e=class extends te{constructor(e){var t;super(),document.getElementById("svelte-ez734h-style")||((t=b("style")).id="svelte-ez734h-style",t.textContent=".application.svelte-ez734h.svelte-ez734h{padding:1.5em;display:grid;grid-template-columns:repeat(8, 1fr);grid-column-gap:2em}.left.svelte-ez734h.svelte-ez734h{grid-column-start:1;grid-column-end:6}.right.svelte-ez734h.svelte-ez734h{grid-column-start:6;grid-column-end:9}.bottom.svelte-ez734h.svelte-ez734h{grid-column-start:1;grid-column-end:9;display:grid;grid-template-columns:repeat(3, 1fr);grid-column-gap:1.5em}.application-title.svelte-ez734h.svelte-ez734h{margin-top:0}.application-opportunities.svelte-ez734h.svelte-ez734h,.application-challenges.svelte-ez734h.svelte-ez734h{grid-column-start:6;grid-column-end:9}.opportunities-title.svelte-ez734h.svelte-ez734h,.challenges-title.svelte-ez734h.svelte-ez734h{margin-top:0;margin-bottom:1em}.example-title.svelte-ez734h.svelte-ez734h{margin-bottom:0.5em}ul.svelte-ez734h.svelte-ez734h{line-height:1.2em}li.svelte-ez734h.svelte-ez734h{margin-bottom:0.8em}.example-description.svelte-ez734h.svelte-ez734h{font-size:0.8em;line-height:1.4em;color:var(--gray)}img.svelte-ez734h.svelte-ez734h{width:100%;border:1px solid var(--gray-border)\n\t}.example.svelte-ez734h>a.svelte-ez734h{border-bottom:none}",g(document.head,t)),ee(this,e,Ie,Ee,a,{applicationData:0})}},qe=n(0);function Be(e,t,n){const s=e.slice();return s[0]=t[n],s}function Oe(e,t,n){const s=e.slice();return s[0]=t[n],s}function Ae(e){let t,n,r=e[0].title+"";return{c(){t=x(r),n=$()},m(e,s){m(e,t,s),m(e,n,s)},p:s,d(e){e&&v(t),e&&v(n)}}}function Pe(e){let t;const n=new $e({props:{$$slots:{default:[Ae]},$$scope:{ctx:e}}});return{c(){X(n.$$.fragment)},m(e,s){Q(n,e,s),t=!0},p(e,t){const s={};32&t&&(s.$$scope={dirty:t,ctx:e}),n.$set(s)},i(e){t||(U(n.$$.fragment,e),t=!0)},o(e){G(n.$$.fragment,e),t=!1},d(e){Z(n,e)}}}function Le(e){let t,n,s=qe,r=[];for(let t=0;t<s.length;t+=1)r[t]=Pe(Oe(e,s,t));const i=e=>G(r[e],1,1,()=>{r[e]=null});return{c(){for(let e=0;e<r.length;e+=1)r[e].c();t=w()},m(e,s){for(let t=0;t<r.length;t+=1)r[t].m(e,s);m(e,t,s),n=!0},p(e,n){if(0&n){let l;for(s=qe,l=0;l<s.length;l+=1){const i=Oe(e,s,l);r[l]?(r[l].p(i,n),U(r[l],1)):(r[l]=Pe(i),r[l].c(),U(r[l],1),r[l].m(t.parentNode,t))}for(F(),l=s.length;l<r.length;l+=1)i(l);J()}},i(e){if(!n){for(let e=0;e<s.length;e+=1)U(r[e]);n=!0}},o(e){r=r.filter(Boolean);for(let e=0;e<r.length;e+=1)G(r[e]);n=!1},d(e){y(r,e),e&&v(t)}}}function Me(e){let t,n;const r=new _e({props:{applicationData:e[0]}});return{c(){X(r.$$.fragment),t=$()},m(e,s){Q(r,e,s),m(e,t,s),n=!0},p:s,i(e){n||(U(r.$$.fragment,e),n=!0)},o(e){G(r.$$.fragment,e),n=!1},d(e){Z(r,e),e&&v(t)}}}function Se(e){let t;const n=new ye({props:{$$slots:{default:[Me]},$$scope:{ctx:e}}});return{c(){X(n.$$.fragment)},m(e,s){Q(n,e,s),t=!0},p(e,t){const s={};32&t&&(s.$$scope={dirty:t,ctx:e}),n.$set(s)},i(e){t||(U(n.$$.fragment,e),t=!0)},o(e){G(n.$$.fragment,e),t=!1},d(e){Z(n,e)}}}function De(e){let t,n,s;const r=new fe({props:{$$slots:{default:[Le]},$$scope:{ctx:e}}});let i=qe,l=[];for(let t=0;t<i.length;t+=1)l[t]=Se(Be(e,i,t));const o=e=>G(l[e],1,1,()=>{l[e]=null});return{c(){X(r.$$.fragment),t=$();for(let e=0;e<l.length;e+=1)l[e].c();n=w()},m(e,i){Q(r,e,i),m(e,t,i);for(let t=0;t<l.length;t+=1)l[t].m(e,i);m(e,n,i),s=!0},p(e,t){const s={};if(32&t&&(s.$$scope={dirty:t,ctx:e}),r.$set(s),0&t){let s;for(i=qe,s=0;s<i.length;s+=1){const r=Be(e,i,s);l[s]?(l[s].p(r,t),U(l[s],1)):(l[s]=Se(r),l[s].c(),U(l[s],1),l[s].m(n.parentNode,n))}for(F(),s=i.length;s<l.length;s+=1)o(s);J()}},i(e){if(!s){U(r.$$.fragment,e);for(let e=0;e<i.length;e+=1)U(l[e]);s=!0}},o(e){G(r.$$.fragment,e),l=l.filter(Boolean);for(let e=0;e<l.length;e+=1)G(l[e]);s=!1},d(e){Z(r,e),e&&v(t),y(l,e),e&&v(n)}}}function Re(e){let t;const n=new ue({props:{$$slots:{default:[De]},$$scope:{ctx:e}}});return{c(){X(n.$$.fragment)},m(e,s){Q(n,e,s),t=!0},p(e,[t]){const s={};32&t&&(s.$$scope={dirty:t,ctx:e}),n.$set(s)},i(e){t||(U(n.$$.fragment,e),t=!0)},o(e){G(n.$$.fragment,e),t=!1},d(e){Z(n,e)}}}var Ne=class extends te{constructor(e){super(),ee(this,e,null,Re,a,{})}};function He(e,t,n){const s=e.slice();return s[9]=t[n],s[11]=n,s}function Ke(e){let t,n,s,r;function i(...t){return e[8](e[11],...t)}return{c(){t=b("img"),t.src!==(n="images/horse/"+e[9]+".jpg")&&j(t,"src",n),j(t,"alt","Horse running."),j(t,"class",s=f(e[9]===e[0]?"frame active-frame":"frame")+" svelte-ddjnd7")},m(e,n){m(e,t,n),r=z(t,"mouseover",i)},p(n,r){e=n,1&r&&s!==(s=f(e[9]===e[0]?"frame active-frame":"frame")+" svelte-ddjnd7")&&j(t,"class",s)},d(e){e&&v(t),r()}}}function We(e){let t,n,r,i,a,c,d,u,h,p,f,w,E,I,_,q,B,O,A,P=e[1]?"pause_circle_outline":"play_circle_outline",L=e[2],M=[];for(let t=0;t<L.length;t+=1)M[t]=Ke(He(e,L,t));return{c(){t=b("div"),n=b("div"),r=b("img"),a=$(),c=b("div"),d=b("figcaption"),d.innerHTML="\n                In 1878, Eadweard Muybridge settled Leland Stanford&#39;s hotly debated question of whether all four feet of a horse lifted off the ground during a trot using multiple cameras to capture motion in stop-motion photographs.\n                This interactive graphic uses <i>animation</i> and <i>multiple representations</i> to illustrate this finding.\n             ",u=$(),h=b("div"),p=b("label"),f=b("input"),w=$(),E=b("div"),I=b("button"),_=b("i"),q=x(P),B=$(),O=b("div");for(let e=0;e<M.length;e+=1)M[e].c();j(r,"id","horse"),r.src!==(i="images/horse/"+e[0]+".jpg")&&j(r,"src",i),j(r,"alt","Horse running."),j(r,"class","svelte-ddjnd7"),j(f,"type","range"),j(f,"min","1"),j(f,"max","11"),j(f,"class","slider svelte-ddjnd7"),C(h,"padding-bottom","5px"),j(_,"class","material-icons"),C(_,"font-size","48px"),j(I,"class","svelte-ddjnd7"),j(c,"id","horse-controls"),j(c,"class","svelte-ddjnd7"),j(n,"id","horse-wrapper"),j(n,"class","svelte-ddjnd7"),j(O,"id","frames"),j(O,"class","svelte-ddjnd7"),j(t,"id","wrapper"),j(t,"class","svelte-ddjnd7")},m(s,i){m(s,t,i),g(t,n),g(n,r),g(n,a),g(n,c),g(c,d),g(c,u),g(c,h),g(h,p),g(p,f),T(f,e[0]),g(c,w),g(c,E),g(E,I),g(I,_),g(_,q),g(t,B),g(t,O);for(let e=0;e<M.length;e+=1)M[e].m(O,null);A=[z(f,"change",e[7]),z(f,"input",e[7]),z(f,"mousedown",e[4]),z(I,"click",(function(){o(e[1]?e[4]:e[3])&&(e[1]?e[4]:e[3]).apply(this,arguments)}))]},p(t,[n]){if(e=t,1&n&&r.src!==(i="images/horse/"+e[0]+".jpg")&&j(r,"src",i),1&n&&T(f,e[0]),2&n&&P!==(P=e[1]?"pause_circle_outline":"play_circle_outline")&&k(q,P),37&n){let t;for(L=e[2],t=0;t<L.length;t+=1){const s=He(e,L,t);M[t]?M[t].p(s,n):(M[t]=Ke(s),M[t].c(),M[t].m(O,null))}for(;t<M.length;t+=1)M[t].d(1);M.length=L.length}},i:s,o:s,d(e){e&&v(t),y(M,e),l(A)}}}function Ye(e,t,n){let s=1,r=!1;const i=Array.from(new Array(11),(e,t)=>t+1);let l;function o(){r||(n(1,r=!0),l=setInterval(()=>{n(0,s%=11),n(0,s+=1)},100))}function a(){n(1,r=!1),clearInterval(l)}function c(e){a(),n(0,s=e)}o();return[s,r,i,o,a,c,l,function(){var e;e=this.value,s=""===e?void 0:+e,n(0,s)},e=>c(e+1)]}var Fe=class extends te{constructor(e){var t;super(),document.getElementById("svelte-ddjnd7-style")||((t=b("style")).id="svelte-ddjnd7-style",t.textContent="#wrapper.svelte-ddjnd7{margin-top:1.5em;margin-bottom:1.5em}#frames.svelte-ddjnd7{display:grid;grid-template-columns:repeat(11, 1fr);grid-column-gap:0.2em;padding-top:10px}.frame.svelte-ddjnd7{width:100%;filter:brightness(60%);cursor:crosshair}.active-frame.svelte-ddjnd7{border-bottom:3px solid var(--orange);padding-bottom:2px;filter:brightness(100%)}#horse-wrapper.svelte-ddjnd7{display:grid;grid-template-columns:repeat(12, 1fr);grid-column-gap:2em}#horse.svelte-ddjnd7{grid-column-start:1;grid-column-end:7;width:100%}#horse-controls.svelte-ddjnd7{grid-column-start:7;grid-column-end:11;display:flex;flex-direction:column;justify-content:center;text-align:left}.slider.svelte-ddjnd7{-webkit-appearance:none;appearance:none;outline:none;opacity:0.7;-webkit-transition:.2s;transition:opacity .2s;height:3px;border-radius:2px;background-color:hsla(0, 0%, 0%, 0.2)}.slider.svelte-ddjnd7:hover{opacity:1}.slider.svelte-ddjnd7::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;cursor:pointer;top:-6px;left:-6px;width:13px;height:13px;background-color:var(--orange);border-radius:50%}.slider.svelte-ddjnd7::-moz-range-thumb{top:-6px;left:-6px;width:13px;height:13px;background-color:var(--orange);cursor:pointer}button.svelte-ddjnd7{border:none;padding:0;cursor:pointer;outline:inherit;color:var(--orange)}",g(document.head,t)),ee(this,e,Ye,We,a,{})}};function Je(e){let t;return{c(){t=b("div"),t.textContent="asdf",j(t,"id","gutter-t"),j(t,"class","svelte-18ibyfr")},m(e,n){m(e,t,n)},p:s,i:s,o:s,d(e){e&&v(t)}}}var Ue=class extends te{constructor(e){var t;super(),document.getElementById("svelte-18ibyfr-style")||((t=b("style")).id="svelte-18ibyfr-style",t.textContent="#gutter-t.svelte-18ibyfr{color:red}#gutter-test{grid-column-start:2;grid-column-end:4}",g(document.head,t)),ee(this,e,null,Je,a,{})}};new se({target:document.getElementById("research-x-practice")}),new ie({target:document.getElementById("contents")}),new Ne({target:document.getElementById("applications-tab")}),new Ue({target:document.getElementById("gutter-test")}),new Fe({target:document.getElementById("horse")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,